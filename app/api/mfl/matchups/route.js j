import { NextResponse } from "next/server";

export async function GET(req) {
  const { searchParams } = new URL(req.url);
  const leagueId = searchParams.get("leagueId") || process.env.MFL_LEAGUE_ID || "61408";
  const base = process.env.MFL_BASE || "https://api.myfantasyleague.com";
  const year = process.env.MFL_YEAR || "2025";
  const week = searchParams.get("week") || "WW"; // WW = current week in MFL

  try {
    const url = `${base}/${year}/export?TYPE=liveScoring&L=${leagueId}&W=${week}&JSON=1`;
    const r = await fetch(url, { next: { revalidate: 15 } });
    const data = await r.json().catch(() => null);

    const games = data?.liveScoring?.matchup || data?.liveScoring?.matchups?.matchup || [];
    const matchups = Array.isArray(games)
      ? games.map((g) => ({
          id: g.id || g.matchup_id,
          away: {
            name: g.teamA?.name || g.franchise?.[0]?.name || "Away",
            score: Number(g.teamA?.score ?? g.franchise?.[0]?.score ?? 0),
          },
          home: {
            name: g.teamB?.name || g.franchise?.[1]?.name || "Home",
            score: Number(g.teamB?.score ?? g.franchise?.[1]?.score ?? 0),
          },
          status: g.status || data?.liveScoring?.status || "Scheduled",
          kickoff: g.kickoff,
        }))
      : [];

    return NextResponse.json(matchups);
  } catch {
    return NextResponse.json([]); // safe empty list
  }
}
